// choose the name and size of each breakpoint
$breakpoints: (
	"xxs": 480,
	"xs": 560,
	"s": 640,
	"m": 720,
	"l": 960,
	"xl": 1140,
	"xxl": 1320
);

// mixin to utilise media queries
@mixin q($name) {
	$mediaSize: map-get($breakpoints, $name);

	@media (min-width: #{$mediaSize}px) {
		@content;
	}
}

// arbitrary media query
@mixin qa($width) {
	@media (min-width: #{$width}px) {
		@content;
	}
}

.columns {
	--xgap: 30px;
	--ygap: var(--xgap);
	display: flex;
	margin-left: calc((var(--xgap) / 2) * -1);
	margin-right: calc((var(--xgap) / 2) * -1);
	margin-top: calc(var(--ygap) * -1);
	flex-wrap: wrap;
	overflow: hidden;
	&.vcentered {
		align-items: center;
	}
	&.not-vcentered {
		align-items: stretch;
	}
	&.gapless {
		--xgap: 0px; // directly affects .column
		margin-left: auto;
		margin-right: auto;
		margin-top: auto;
	}
	&.gap-big {
		@include q(l) {
			--xgap: 60px;
			--ygap: 30px;
		}
	}
	&.centered {
		justify-content: center;
	}
	&.reversed {
		flex-direction: row-reverse;
	}
	&.not-reversed {
		flex-direction: row-reverse;
	}
	&.vgapless {
		margin-top: 0;
		.column {
			margin-top: 0;
		}
	}
}

.column {
	display: block;
	flex-basis: 0;
	flex-grow: 1;
	flex-shrink: 1;
	padding-left: calc(var(--xgap) / 2);
	padding-right: calc(var(--xgap) / 2);
	margin-top: var(--ygap);
	&.is-narrow {
		flex: none;
	}
	&.is-offset-0 {
		margin-left: 0;
	}
	&.first {
		order: -1;
	}
}

@for $i from 1 through 12 {
	.column.is-#{$i} {
		width: percentage(calc($i / 12));
		flex: none;
	}
	.column.is-offset-#{$i} {
		margin-left: percentage(calc($i / 12));
	}
}

// responsive sizes
@each $name, $size in $breakpoints {
	@media (min-width: #{$size}px) {
		.columns {
			&.vcentered-#{$name} {
				align-items: center;
			}
			&.not-vcentered-#{$name} {
				align-items: stretch;
			}
			&.not-centered-#{$name} {
				justify-content: flex-start;
			}
			&.reversed-#{$name} {
				flex-direction: row-reverse;
			}
			&.not-reversed-#{$name} {
				flex-direction: row;
			}
			&.spread-#{$name} {
				justify-content: space-between; // saves having to add offsets sometimes
			}
			&.vgap-reset-#{$name} {
				--ygap: var(--xgap);
			}
			&.gapped-#{$name} .column {
				padding-left: calc(var(--xgap) / 2);
				padding-right: calc(var(--xgap) / 2);
			}
		}
		.column {
			&.is-narrow-#{$name} {
				flex: none;
				width: auto;
				flex-grow: 1;
			}
			&.is-offset-0-#{$name} {
				margin-left: 0;
			}
			&.first-#{$name} {
				order: -1;
			}
			&.not-first-#{$name} {
				order: initial;
			}
		}

		@for $i from 1 through 12 {
			.column {
				&.is-#{$i}-#{$name} {
					width: percentage(calc($i / 12));
					flex: none;
				}

				&.is-offset-#{$i}-#{$name} {
					margin-left: percentage(calc($i / 12));
				}
			}
		}
	}
}
